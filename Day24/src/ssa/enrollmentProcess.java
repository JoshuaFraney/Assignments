package ssa;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.*;
import java.util.Properties;


public class enrollmentProcess {

	public static Connection myConn=null;
	public static PreparedStatement myStmt=null;
	public static  ResultSet myRs=null;
	static int minimumSat;
	static int studentSat;
	
	public static void main(String[] args) throws SQLException {
		enrollStudent(200,"Adam","Zapel",1200,3.0);
		enrollStudent(210,"Graham","Krakir",500,2.5);
		enrollStudent(220,"Ella","Vader",800,3.0);
		enrollStudent(230,"Stanley","Kupp",1350,3.3);
		enrollStudent(240,"Lou","Zarr",950,3.0);
		
		assignClass(200, 10101);
		assignClass(200, 10102);
		assignClass(200, 40311);
		assignClass(200, 50101);
		
		assignClass(210, 10101);
		assignClass(210, 20201);
		assignClass(210, 30202);
		assignClass(210, 60351);

		assignClass(220, 10103);
		assignClass(220, 30101);
		assignClass(220, 40441);
		assignClass(220, 60222);

		assignClass(230, 20203);
		assignClass(230, 40442);
		assignClass(230, 50102);
		assignClass(230, 20404);

		assignClass(240, 60221);
		assignClass(240, 60223);
		assignClass(240, 20202);
		assignClass(240, 30303);

		fetchData();
	}
public static void display() throws SQLException, FileNotFoundException, IOException {

		System.out.println("Education System - Enrollment Process");
		System.out.println("=====================================");
		System.out.println("");
		while(myRs.next()) {
			String fName = myRs.getString("first_name");
			String lName = myRs.getString("last_name");
			double gpa = myRs.getDouble("gpa");
			int sat = myRs.getInt("sat");
			String major = myRs.getString("description");
			int reqSat = myRs.getInt("req_sat");
			System.out.printf("Enrolled %s %s as a new student. \n", fName, lName);
			System.out.printf("%s %s has an SAT score of %.2f \n", fName, lName, gpa);
			System.out.printf("Assigned %s %s to the %s major which requires an SAT score of %d \n", fName, lName, major, reqSat);
			System.out.printf("Enrolled %s %s in the following four classes: \n", fName, lName);
			// Tip to line up the columns
			// System.out.println("%-20s", fName + lName)
	}
	}
	
	private static void fetchData() throws SQLException {
		
try {
			// Make Connection
			makeConnection();
			// Statement
			myStmt = (PreparedStatement)myConn.prepareStatement("select * from student, major where student.id = ?");
			
			// Set Parameter Values
			myStmt.setInt(1, 100);
			// Execute the Query
			myRs = myStmt.executeQuery();
			
			//myStmt = myConn.prepareStatement("select * from , autoGeneratedKeys)
			// Process the result
//			System.out.println("**********************************************");
//			System.out.println("First Result Set");
//			System.out.println("**********************************************");
			display();


			// statement reuse
			// Set parameter values
//				myStmt.setDouble(1,  );
//				myRs = myStmt.executeQuery();
//				display();
				
		}catch(Exception ex) {
			ex.printStackTrace();
			
		}finally{
		
			close();
	}

}
	private static void makeConnection() throws FileNotFoundException, IOException, SQLException {
		
		Properties prop = new Properties();
		prop.load(new FileInputStream("src/ssa/enrollment.properties"));
		String dburl = prop.getProperty("dburl");
		String user = prop.getProperty("user");
		String pass = prop.getProperty("password");
		myConn = (Connection)DriverManager.getConnection(dburl, user, pass);
	}

	private static void deleteData() throws SQLException {
		
		try{
			makeConnection();
			myStmt = myConn.prepareStatement("delete from student where id = ?");
			
			myStmt.setInt(1, 10);
			
			myStmt.executeUpdate();
			
		}catch(Exception ex){
			ex.printStackTrace();
		}finally{
			close();
		}
	}
	public static void close() throws SQLException{
		if(myConn != null)
			myConn.close();
		if(myStmt != null)
			myStmt.close();
		if(myRs != null)
			myRs.close();
	}
	public static void assignMajor(int studentId, int majorId) throws SQLException{
		try{
			makeConnection();
			myStmt = myConn.prepareStatement("select sat from student where id = ?");
			myStmt.setInt(1, studentId);
			myRs = myStmt.executeQuery();
			while(myRs.next()){
				studentSat = myRs.getInt("sat");
			}
			makeConnection();
			myStmt = myConn.prepareStatement("select req_sat from major where id = ?");
			myStmt.setInt(1, majorId);
			myRs = myStmt.executeQuery();
			while(myRs.next()){
				 minimumSat = myRs.getInt("req_sat");
			}
			if(studentSat >= minimumSat){
			myStmt = myConn.prepareStatement("update student set major_id = ? where id = ?");
			myStmt.setInt(1, majorId);
			myStmt.setInt(2, studentId);
			myStmt.executeUpdate();
			}
			else {
				System.out.println("Unable to enroll in the requested major due to lack of SAT requirements.");
			}
		}catch(Exception ex){
			ex.printStackTrace();
		}finally{
			close();
		}
	}
	
	/*public static void assignMajor(int id, int major_id) throws SQLException{
		try{
			makeConnection();
			myStmt = myConn.prepareStatement("select sat from student where id = ?");
			int mySat = myRs.getInt(sat);
			int reqSat = myRs.getInt(req_sat);
			if(mySat >= reqSat) {
			myStmt = myConn.prepareStatement("update student set major_id = ? where id = ?");

			myStmt.setInt(1, major_id);
			myStmt.setInt(2, id);

			myStmt.executeUpdate();
			}
			if(mySat <= reqSat) {
				System.out.println("Unable to enroll in the requested major due to lack of SAT requirements.");
			}
		}catch(Exception ex){
			ex.printStackTrace();
		}finally{
			close();
		}
	}
	*/
	public static void enrollStudent(int id, String first_name, String last_name, int sat, double gpa) throws SQLException {
		try{
			makeConnection();
			
			myStmt = myConn.prepareStatement("insert into student (id, first_name, last_name, sat, gpa) "
					+ "values (?,?,?,?,?)");
			
			myStmt.setInt(1, id);
			myStmt.setString(2, first_name);
			myStmt.setString(3, last_name);
			myStmt.setInt(4, sat);
			myStmt.setDouble(5, gpa);

			myStmt.executeUpdate();
			
		}catch(Exception ex){
			ex.printStackTrace();
		}finally{
			close();
		}
	}
	public static void assignClass(int student_id, int class_id) throws SQLException {
		try{
			makeConnection();
			myStmt = myConn.prepareStatement("insert into student_class_relationship (student_id, class_id) "
					+ "values (?,?)");
			
			myStmt.setInt(1, student_id);
			myStmt.setInt(2, class_id);

			myStmt.executeUpdate();
			
		}catch(Exception ex){
			ex.printStackTrace();
		}finally{
			close();
		}
	}
	}
